<?php

namespace Codedor\FilamentArchitect\Facades;

use Codedor\FilamentArchitect\BlockCollection as Blocks;
use Illuminate\Support\Facades\Facade;

/**
 * @method static \Codedor\FilamentArchitect\BlockCollection fromConfig()
 * @method static array filamentBlocks()
 * @method static \Illuminate\Contracts\View\View render(array $blocks)
 * @method static \Codedor\FilamentArchitect\BlockCollection range(int $from, int $to)
 * @method static array all()
 * @method static \Illuminate\Support\LazyCollection lazy()
 * @method static float|int|null avg(callable|int|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|string|null $callback = null)
 * @method static float|int|null median(string|array|null $key = null)
 * @method static array|null mode(string|array|null $key = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection collapse()
 * @method static bool contains(callable|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|string $key, mixed $operator = null, mixed $value = null)
 * @method static bool containsStrict(callable|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock $key, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|null $value = null)
 * @method static bool doesntContain(mixed $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection crossJoin(\Illuminate\Contracts\Support\Arrayable|iterable ...$lists)
 * @method static \Codedor\FilamentArchitect\BlockCollection diff(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection diffUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection diffAssoc(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection diffAssocUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection diffKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection diffKeysUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection duplicates(callable|string|null $callback = null, bool $strict = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection duplicatesStrict(callable|string|null $callback = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection except(\Illuminate\Support\Enumerable|array|string $keys)
 * @method static \Codedor\FilamentArchitect\BlockCollection filter(callable|null $callback = null)
 * @method static \Codedor\FilamentArchitect\Filament\Architect\BaseBlock first(callable|null $callback = null, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|\Closure $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection flatten(int $depth = unknown)
 * @method static \Codedor\FilamentArchitect\BlockCollection flip()
 * @method static \Codedor\FilamentArchitect\BlockCollection forget(\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|array $keys)
 * @method static \Codedor\FilamentArchitect\Filament\Architect\BaseBlock get(void $key, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|\Closure $default = null)
 * @method static mixed getOrPut(mixed $key, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|\Closure $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection groupBy(callable|array|string $groupBy, bool $preserveKeys = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection keyBy(callable|array|string $keyBy)
 * @method static bool has(\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|array $key)
 * @method static bool hasAny(mixed $key)
 * @method static string implode(callable|string $value, string|null $glue = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection intersect(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection intersectUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection intersectAssoc(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection intersectAssocUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection intersectByKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static bool isEmpty()
 * @method static bool containsOneItem()
 * @method static string join(string $glue, string $finalGlue = '')
 * @method static \Codedor\FilamentArchitect\BlockCollection keys()
 * @method static \Codedor\FilamentArchitect\Filament\Architect\BaseBlock last(callable|null $callback = null, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|\Closure $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection pluck(string|int|array $value, string|null $key = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection map(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection mapToDictionary(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection mapWithKeys(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection merge(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection mergeRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection combine(\Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FilamentArchitect\BlockCollection union(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection nth(int $step, int $offset = 0)
 * @method static \Codedor\FilamentArchitect\BlockCollection only(\Illuminate\Support\Enumerable|array|string|null $keys)
 * @method static \Codedor\FilamentArchitect\BlockCollection|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|null pop(int $count = 1)
 * @method static \Codedor\FilamentArchitect\BlockCollection prepend(void $value, void $key = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection push(void ...$values)
 * @method static \Codedor\FilamentArchitect\BlockCollection concat(iterable $source)
 * @method static \Codedor\FilamentArchitect\Filament\Architect\BaseBlock pull(void $key, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|\Closure $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection put(void $key, void $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock random(callable|int|null $number = null, bool $preserveKeys = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection replace(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection replaceRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection reverse()
 * @method static \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|bool search(\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|callable $value, bool $strict = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|null shift(int $count = 1)
 * @method static \Codedor\FilamentArchitect\BlockCollection shuffle(int|null $seed = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection sliding(int $size = 2, int $step = 1)
 * @method static \Codedor\FilamentArchitect\BlockCollection skip(int $count)
 * @method static \Codedor\FilamentArchitect\BlockCollection skipUntil(\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|callable $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection skipWhile(\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|callable $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection slice(int $offset, int|null $length = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection split(int $numberOfGroups)
 * @method static \Codedor\FilamentArchitect\BlockCollection splitIn(int $numberOfGroups)
 * @method static void sole(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static void firstOrFail(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection chunk(int $size)
 * @method static \Codedor\FilamentArchitect\BlockCollection chunkWhile(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection sort(callable|null|int $callback = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection sortDesc(int $options = 0)
 * @method static \Codedor\FilamentArchitect\BlockCollection sortBy(array|callable|string $callback, int $options = 0, bool $descending = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection sortByDesc(array|callable|string $callback, int $options = 0)
 * @method static \Codedor\FilamentArchitect\BlockCollection sortKeys(int $options = 0, bool $descending = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection sortKeysDesc(int $options = 0)
 * @method static \Codedor\FilamentArchitect\BlockCollection sortKeysUsing(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection splice(int $offset, int|null $length = null, array $replacement = [])
 * @method static \Codedor\FilamentArchitect\BlockCollection take(int $limit)
 * @method static \Codedor\FilamentArchitect\BlockCollection takeUntil(\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|callable $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection takeWhile(\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|callable $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection transform(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection dot()
 * @method static \Codedor\FilamentArchitect\BlockCollection undot()
 * @method static \Codedor\FilamentArchitect\BlockCollection unique(callable|string|null $key = null, bool $strict = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection values()
 * @method static \Codedor\FilamentArchitect\BlockCollection zip(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \Codedor\FilamentArchitect\BlockCollection pad(int $size, void $value)
 * @method static \ArrayIterator getIterator()
 * @method static int count()
 * @method static \Codedor\FilamentArchitect\BlockCollection countBy(callable|string|null $countBy = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection add(void $item)
 * @method static \Illuminate\Support\Collection toBase()
 * @method static \Codedor\FilamentArchitect\BlockCollection make(\Illuminate\Contracts\Support\Arrayable|iterable|null $items = [])
 * @method static \Codedor\FilamentArchitect\BlockCollection wrap(iterable|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock $value)
 * @method static array unwrap(array|\Codedor\FilamentArchitect\BlockCollection $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection empty()
 * @method static \Codedor\FilamentArchitect\BlockCollection times(int $number, callable|null $callback = null)
 * @method static float|int|null average(callable|int|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|string|null $callback = null)
 * @method static bool some(callable|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|string $key, mixed $operator = null, mixed $value = null)
 * @method static never dd(mixed ...$args)
 * @method static \Codedor\FilamentArchitect\BlockCollection dump()
 * @method static \Codedor\FilamentArchitect\BlockCollection each(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection eachSpread(callable $callback)
 * @method static bool every(callable|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|string $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|null firstWhere(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FilamentArchitect\Filament\Architect\BaseBlock value(string $key, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|\Closure $default = null)
 * @method static bool isNotEmpty()
 * @method static \Codedor\FilamentArchitect\BlockCollection mapSpread(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection mapToGroups(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection flatMap(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection mapInto(string $class)
 * @method static mixed min(callable|string|null $callback = null)
 * @method static mixed max(callable|string|null $callback = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection forPage(int $page, int $perPage)
 * @method static \Codedor\FilamentArchitect\BlockCollection partition(callable|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock|string $key, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|string|null $operator = null, \Codedor\FilamentArchitect\Filament\Architect\BaseBlock|null $value = null)
 * @method static mixed sum(callable|string|null $callback = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock whenEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock whenNotEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock unlessEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock unlessNotEmpty(callable $callback, callable|null $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection where(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereNull(string|null $key = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereNotNull(string|null $key = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereStrict(string $key, mixed $value)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereNotBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereNotIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereNotInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \Codedor\FilamentArchitect\BlockCollection whereInstanceOf(string|array $type)
 * @method static void pipe(callable $callback)
 * @method static void pipeInto(string $class)
 * @method static mixed pipeThrough(array $callbacks)
 * @method static void reduce(callable $callback, void $initial = null)
 * @method static array reduceSpread(callable $callback, mixed ...$initial)
 * @method static void reduceWithKeys(callable $callback, void $initial = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection reject(callable|bool|\Codedor\FilamentArchitect\Filament\Architect\BaseBlock $callback = true)
 * @method static \Codedor\FilamentArchitect\BlockCollection tap(callable $callback)
 * @method static \Codedor\FilamentArchitect\BlockCollection uniqueStrict(callable|string|null $key = null)
 * @method static \Illuminate\Support\Collection collect()
 * @method static array toArray()
 * @method static array jsonSerialize()
 * @method static string toJson(int $options = 0)
 * @method static \CachingIterator getCachingIterator(int $flags = 1)
 * @method static \Codedor\FilamentArchitect\BlockCollection escapeWhenCastingToString(bool $escape = true)
 * @method static void proxy(string $method)
 * @method static \Codedor\FilamentArchitect\BlockCollection|mixed when(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static \Codedor\FilamentArchitect\BlockCollection|mixed unless(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static void macro(string $name, object|callable $macro)
 * @method static void mixin(object $mixin, bool $replace = true)
 * @method static bool hasMacro(string $name)
 * @method static void flushMacros()
 *
 * @see \Codedor\FilamentArchitect\BlockCollection
 */
class BlockCollection extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return string
     */
    protected static function getFacadeAccessor()
    {
        return Blocks::class;
    }
}
